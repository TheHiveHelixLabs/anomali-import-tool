name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]

env:
  DOTNET_VERSION: '6.0.x'
  BUILD_CONFIGURATION: 'Release'

jobs:
  test:
    name: Test
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Shallow clones should be disabled for better analysis
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    - name: Cache NuGet packages
      uses: actions/cache@v3
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-
    
    - name: Restore dependencies
      run: dotnet restore
    
    - name: Build solution
      run: dotnet build --configuration ${{ env.BUILD_CONFIGURATION }} --no-restore
    
    - name: Run unit tests
      run: |
        dotnet test --configuration ${{ env.BUILD_CONFIGURATION }} --no-build --verbosity normal \
          --collect:"XPlat Code Coverage" --results-directory ./coverage
    
    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v3
      with:
        directory: ./coverage
        fail_ci_if_error: true
        verbose: true

  security-scan:
    name: Security Scan
    runs-on: windows-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    - name: Install security scanning tools
      run: |
        dotnet tool install --global security-scan
        dotnet tool install --global dotnet-outdated-tool
    
    - name: Run security scan
      run: security-scan --project-path ./ --format sarif --output security-results.sarif
      continue-on-error: true
    
    - name: Check for outdated packages
      run: dotnet outdated --fail-on-updates
      continue-on-error: true
    
    - name: Upload security scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: security-results.sarif

  quality-gate:
    name: Quality Gate
    runs-on: windows-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    - name: Setup SonarQube
      uses: SonarSource/sonarqube-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      with:
        args: >
          -Dsonar.projectKey=anomali-import-tool
          -Dsonar.organization=your-org
          -Dsonar.host.url=https://sonarcloud.io
          -Dsonar.cs.opencover.reportsPaths=coverage/**/coverage.opencover.xml
          -Dsonar.coverage.exclusions=**/*Tests*/**,**/Program.cs
    
    - name: Build and analyze
      run: |
        dotnet restore
        dotnet build --configuration ${{ env.BUILD_CONFIGURATION }} --no-restore
        dotnet test --configuration ${{ env.BUILD_CONFIGURATION }} --no-build \
          --collect:"XPlat Code Coverage" --results-directory ./coverage \
          -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=opencover

  build:
    name: Build Application
    runs-on: windows-latest
    needs: [test, security-scan, quality-gate]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    - name: Restore dependencies
      run: dotnet restore
    
    - name: Build application
      run: |
        dotnet publish src/AnomaliImportTool/AnomaliImportTool.csproj \
          --configuration ${{ env.BUILD_CONFIGURATION }} \
          --runtime win-x64 \
          --self-contained true \
          --output ./publish \
          -p:PublishSingleFile=true \
          -p:PublishReadyToRun=true \
          -p:IncludeNativeLibrariesForSelfExtract=true
    
    - name: Sign application
      if: github.event_name == 'release'
      run: |
        # Code signing would go here
        echo "Code signing not implemented in this example"
    
    - name: Create installer
      if: github.event_name == 'release'
      run: |
        # Installer creation would go here (e.g., using WiX)
        echo "Installer creation not implemented in this example"
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: anomali-import-tool-${{ github.sha }}
        path: ./publish/
        retention-days: 30

  deploy-staging:
    name: Deploy to Staging
    runs-on: windows-latest
    needs: build
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v3
      with:
        name: anomali-import-tool-${{ github.sha }}
        path: ./artifacts
    
    - name: Deploy to staging
      run: |
        # Deployment logic would go here
        echo "Deploying to staging environment"
        # Example: Copy files to staging server, update configuration, etc.

  deploy-production:
    name: Deploy to Production
    runs-on: windows-latest
    needs: build
    if: github.event_name == 'release'
    environment: production
    
    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v3
      with:
        name: anomali-import-tool-${{ github.sha }}
        path: ./artifacts
    
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        files: ./artifacts/*
        generate_release_notes: true
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Deploy to production
      run: |
        # Production deployment logic would go here
        echo "Deploying to production environment"
        # Example: Upload to distribution servers, update download links, etc.

  notify:
    name: Notify
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    
    steps:
    - name: Notify Slack
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        text: |
          Deployment Status: ${{ job.status }}
          Repository: ${{ github.repository }}
          Branch: ${{ github.ref }}
          Commit: ${{ github.sha }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      if: always() 