<UserControl x:Class="AnomaliImportTool.WPF.Views.SettingsView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:local="clr-namespace:AnomaliImportTool.WPF.Views"
             xmlns:views="clr-namespace:AnomaliImportTool.WPF.Views"
             mc:Ignorable="d"
             xmlns:viewmodel="clr-namespace:AnomaliImportTool.WPF.ViewModels"
             d:DataContext="{d:DesignInstance Type=viewmodel:SettingsViewModel}"
             d:DesignHeight="800" d:DesignWidth="900">
    
    <UserControl.Resources>
        <!-- Styles for consistent UI -->
        <Style x:Key="SectionHeaderStyle" TargetType="TextBlock">
            <Setter Property="FontSize" Value="18"/>
            <Setter Property="FontWeight" Value="SemiBold"/>
            <Setter Property="Foreground" Value="#2C3E50"/>
            <Setter Property="Margin" Value="0,20,0,10"/>
        </Style>
        
        <Style x:Key="SubHeaderStyle" TargetType="TextBlock">
            <Setter Property="FontSize" Value="14"/>
            <Setter Property="FontWeight" Value="Medium"/>
            <Setter Property="Foreground" Value="#34495E"/>
            <Setter Property="Margin" Value="0,15,0,8"/>
        </Style>
        
        <Style x:Key="LabelStyle" TargetType="TextBlock">
            <Setter Property="FontSize" Value="12"/>
            <Setter Property="FontWeight" Value="Normal"/>
            <Setter Property="Foreground" Value="#2C3E50"/>
            <Setter Property="Margin" Value="0,0,0,4"/>
            <Setter Property="VerticalAlignment" Value="Center"/>
        </Style>
        
        <Style x:Key="InputStyle" TargetType="TextBox">
            <Setter Property="Padding" Value="8,6"/>
            <Setter Property="FontSize" Value="12"/>
            <Setter Property="BorderBrush" Value="#BDC3C7"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="Margin" Value="0,0,0,8"/>
            <Style.Triggers>
                <Trigger Property="IsFocused" Value="True">
                    <Setter Property="BorderBrush" Value="#3498DB"/>
                </Trigger>
            </Style.Triggers>
        </Style>
        
        <Style x:Key="PasswordStyle" TargetType="PasswordBox">
            <Setter Property="Padding" Value="8,6"/>
            <Setter Property="FontSize" Value="12"/>
            <Setter Property="BorderBrush" Value="#BDC3C7"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="Margin" Value="0,0,0,8"/>
            <Style.Triggers>
                <Trigger Property="IsFocused" Value="True">
                    <Setter Property="BorderBrush" Value="#3498DB"/>
                </Trigger>
            </Style.Triggers>
        </Style>
        
        <Style x:Key="NumberInputStyle" TargetType="TextBox" BasedOn="{StaticResource InputStyle}">
            <Setter Property="HorizontalContentAlignment" Value="Right"/>
            <Setter Property="Width" Value="80"/>
        </Style>
        
        <Style x:Key="PrimaryButtonStyle" TargetType="Button">
            <Setter Property="Background" Value="#3498DB"/>
            <Setter Property="Foreground" Value="White"/>
            <Setter Property="BorderThickness" Value="0"/>
            <Setter Property="Padding" Value="16,8"/>
            <Setter Property="FontSize" Value="12"/>
            <Setter Property="FontWeight" Value="Medium"/>
            <Setter Property="Cursor" Value="Hand"/>
            <Setter Property="Margin" Value="5"/>
            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background" Value="#2980B9"/>
                </Trigger>
                <Trigger Property="IsPressed" Value="True">
                    <Setter Property="Background" Value="#21618C"/>
                </Trigger>
                <Trigger Property="IsEnabled" Value="False">
                    <Setter Property="Background" Value="#BDC3C7"/>
                    <Setter Property="Cursor" Value="Arrow"/>
                </Trigger>
            </Style.Triggers>
        </Style>
        
        <Style x:Key="SecondaryButtonStyle" TargetType="Button">
            <Setter Property="Background" Value="#ECF0F1"/>
            <Setter Property="Foreground" Value="#2C3E50"/>
            <Setter Property="BorderBrush" Value="#BDC3C7"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="Padding" Value="16,8"/>
            <Setter Property="FontSize" Value="12"/>
            <Setter Property="FontWeight" Value="Medium"/>
            <Setter Property="Cursor" Value="Hand"/>
            <Setter Property="Margin" Value="5"/>
            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background" Value="#D5DBDB"/>
                </Trigger>
                <Trigger Property="IsPressed" Value="True">
                    <Setter Property="Background" Value="#BDC3C7"/>
                </Trigger>
            </Style.Triggers>
        </Style>
        
        <Style x:Key="DangerButtonStyle" TargetType="Button">
            <Setter Property="Background" Value="#E74C3C"/>
            <Setter Property="Foreground" Value="White"/>
            <Setter Property="BorderThickness" Value="0"/>
            <Setter Property="Padding" Value="16,8"/>
            <Setter Property="FontSize" Value="12"/>
            <Setter Property="FontWeight" Value="Medium"/>
            <Setter Property="Cursor" Value="Hand"/>
            <Setter Property="Margin" Value="5"/>
            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background" Value="#C0392B"/>
                </Trigger>
                <Trigger Property="IsPressed" Value="True">
                    <Setter Property="Background" Value="#A93226"/>
                </Trigger>
            </Style.Triggers>
        </Style>
        
        <Style x:Key="ValidationErrorStyle" TargetType="TextBlock">
            <Setter Property="Foreground" Value="#E74C3C"/>
            <Setter Property="FontSize" Value="11"/>
            <Setter Property="Margin" Value="0,0,0,8"/>
            <Setter Property="TextWrapping" Value="Wrap"/>
        </Style>
        
        <Style x:Key="StatusSuccessStyle" TargetType="TextBlock">
            <Setter Property="Foreground" Value="#27AE60"/>
            <Setter Property="FontSize" Value="12"/>
            <Setter Property="FontWeight" Value="Medium"/>
            <Setter Property="Margin" Value="0,8"/>
        </Style>
        
        <Style x:Key="StatusErrorStyle" TargetType="TextBlock">
            <Setter Property="Foreground" Value="#E74C3C"/>
            <Setter Property="FontSize" Value="12"/>
            <Setter Property="FontWeight" Value="Medium"/>
            <Setter Property="Margin" Value="0,8"/>
        </Style>

        <!-- Converters for validation -->
        <BooleanToVisibilityConverter x:Key="BoolToVisConverter"/>
    </UserControl.Resources>

    <ScrollViewer VerticalScrollBarVisibility="Auto" HorizontalScrollBarVisibility="Auto" Padding="20">
        <StackPanel MaxWidth="600">
            
            <!-- Header -->
            <TextBlock Text="API Configuration" Style="{StaticResource SectionHeaderStyle}"/>
            <TextBlock Text="Configure your Anomali ThreatStream API connection settings" 
                       Foreground="#7F8C8D" FontSize="13" Margin="0,0,0,20"/>
            
            <!-- Status Message -->
            <Border Background="#F8F9FA" BorderBrush="#DEE2E6" BorderThickness="1" 
                    Padding="12" Margin="0,0,0,20" CornerRadius="4"
                    Visibility="{Binding StatusMessage, Converter={StaticResource BoolToVisConverter}}">
                <TextBlock Text="{Binding StatusMessage}" TextWrapping="Wrap">
                    <TextBlock.Style>
                        <Style TargetType="TextBlock">
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding IsStatusSuccess}" Value="True">
                                    <Setter Property="Foreground" Value="#27AE60"/>
                                </DataTrigger>
                                <DataTrigger Binding="{Binding IsStatusSuccess}" Value="False">
                                    <Setter Property="Foreground" Value="#E74C3C"/>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </TextBlock.Style>
                </TextBlock>
            </Border>

            <!-- Unsaved Changes Warning -->
            <Border Background="#FFF3CD" BorderBrush="#FFEAA7" BorderThickness="1" 
                    Padding="12" Margin="0,0,0,20" CornerRadius="4"
                    Visibility="{Binding HasUnsavedChanges, Converter={StaticResource BoolToVisConverter}}">
                <StackPanel Orientation="Horizontal">
                    <TextBlock Text="⚠️" FontSize="14" Margin="0,0,8,0" VerticalAlignment="Center"/>
                    <TextBlock Text="You have unsaved changes" Foreground="#856404" FontWeight="Medium"/>
                </StackPanel>
            </Border>
            
            <!-- Basic Configuration -->
            <TextBlock Text="Basic Configuration" Style="{StaticResource SubHeaderStyle}"/>
            
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="120"/>
                    <ColumnDefinition Width="*"/>
                </Grid.ColumnDefinitions>
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                </Grid.RowDefinitions>
                
                <!-- Base URL -->
                <TextBlock Grid.Row="0" Grid.Column="0" Text="Base URL:" Style="{StaticResource LabelStyle}"/>
                <StackPanel Grid.Row="0" Grid.Column="1">
                    <TextBox Text="{Binding BaseUrl, UpdateSourceTrigger=PropertyChanged}" 
                             Style="{StaticResource InputStyle}"
                             ToolTip="The base URL for your Anomali ThreatStream instance (e.g., https://your-instance.threatstream.com/api/v2)"/>
                    <TextBlock Text="{Binding BaseUrlValidationMessage}" 
                               Style="{StaticResource ValidationErrorStyle}"
                               Visibility="{Binding BaseUrlValidationMessage, Converter={StaticResource BoolToVisConverter}}"/>
                </StackPanel>
                
                <!-- Username -->
                <TextBlock Grid.Row="1" Grid.Column="0" Text="Username:" Style="{StaticResource LabelStyle}"/>
                <StackPanel Grid.Row="1" Grid.Column="1">
                    <TextBox Text="{Binding Username, UpdateSourceTrigger=PropertyChanged}" 
                             Style="{StaticResource InputStyle}"
                             ToolTip="Your Anomali ThreatStream username"/>
                    <TextBlock Text="{Binding UsernameValidationMessage}" 
                               Style="{StaticResource ValidationErrorStyle}"
                               Visibility="{Binding UsernameValidationMessage, Converter={StaticResource BoolToVisConverter}}"/>
                </StackPanel>
                
                <!-- API Key -->
                <TextBlock Grid.Row="2" Grid.Column="0" Text="API Key:" Style="{StaticResource LabelStyle}"/>
                <StackPanel Grid.Row="2" Grid.Column="1">
                    <PasswordBox x:Name="ApiKeyBox" Style="{StaticResource PasswordStyle}"
                                 ToolTip="Your Anomali ThreatStream API key (stored securely)"/>
                    <TextBlock Text="{Binding ApiKeyValidationMessage}" 
                               Style="{StaticResource ValidationErrorStyle}"
                               Visibility="{Binding ApiKeyValidationMessage, Converter={StaticResource BoolToVisConverter}}"/>
                    <StackPanel Orientation="Horizontal">
                        <Button Content="Show/Hide" Style="{StaticResource SecondaryButtonStyle}" 
                                Click="ToggleApiKeyVisibility" Margin="0,5,5,0"/>
                        <Button Content="Clear" Style="{StaticResource DangerButtonStyle}" 
                                Command="{Binding ClearApiKeyCommand}" Margin="0,5,0,0"/>
                    </StackPanel>
                </StackPanel>
            </Grid>
            
            <!-- Advanced Configuration -->
            <TextBlock Text="Advanced Configuration" Style="{StaticResource SubHeaderStyle}"/>
            
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="120"/>
                    <ColumnDefinition Width="*"/>
                </Grid.ColumnDefinitions>
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                </Grid.RowDefinitions>
                
                <!-- Timeout -->
                <TextBlock Grid.Row="0" Grid.Column="0" Text="Timeout (sec):" Style="{StaticResource LabelStyle}"/>
                <StackPanel Grid.Row="0" Grid.Column="1" Orientation="Horizontal">
                    <TextBox Text="{Binding TimeoutSeconds, UpdateSourceTrigger=PropertyChanged}" 
                             Style="{StaticResource NumberInputStyle}"
                             ToolTip="Request timeout in seconds (default: 30)"/>
                    <TextBlock Text="{Binding TimeoutValidationMessage}" 
                               Style="{StaticResource ValidationErrorStyle}" Margin="10,0,0,0"
                               Visibility="{Binding TimeoutValidationMessage, Converter={StaticResource BoolToVisConverter}}"/>
                </StackPanel>
                
                <!-- Max Retry Attempts -->
                <TextBlock Grid.Row="1" Grid.Column="0" Text="Max Retries:" Style="{StaticResource LabelStyle}"/>
                <StackPanel Grid.Row="1" Grid.Column="1" Orientation="Horizontal">
                    <TextBox Text="{Binding MaxRetryAttempts, UpdateSourceTrigger=PropertyChanged}" 
                             Style="{StaticResource NumberInputStyle}"
                             ToolTip="Maximum number of retry attempts for failed requests (default: 3)"/>
                    <TextBlock Text="{Binding RetryValidationMessage}" 
                               Style="{StaticResource ValidationErrorStyle}" Margin="10,0,0,0"
                               Visibility="{Binding RetryValidationMessage, Converter={StaticResource BoolToVisConverter}}"/>
                </StackPanel>
                
                <!-- SSL Options -->
                <TextBlock Grid.Row="2" Grid.Column="0" Text="SSL Options:" Style="{StaticResource LabelStyle}"/>
                <StackPanel Grid.Row="2" Grid.Column="1">
                    <CheckBox IsChecked="{Binding IgnoreSslErrors}" Content="Ignore SSL Certificate Errors" 
                              Margin="0,0,0,8" FontSize="12"
                              ToolTip="⚠️ WARNING: Only use for testing purposes. This makes connections insecure."/>
                    <TextBlock Text="⚠️ Warning: Ignoring SSL errors makes your connection insecure" 
                               Foreground="#E67E22" FontSize="11" TextWrapping="Wrap"
                               Visibility="{Binding IgnoreSslErrors, Converter={StaticResource BoolToVisConverter}}"/>
                </StackPanel>
            </Grid>
            
            <!-- Proxy Configuration -->
            <TextBlock Text="Proxy Configuration" Style="{StaticResource SubHeaderStyle}"/>
            
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="120"/>
                    <ColumnDefinition Width="*"/>
                </Grid.ColumnDefinitions>
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                </Grid.RowDefinitions>
                
                <!-- Use Proxy -->
                <TextBlock Grid.Row="0" Grid.Column="0" Text="Use Proxy:" Style="{StaticResource LabelStyle}"/>
                <CheckBox Grid.Row="0" Grid.Column="1" IsChecked="{Binding UseProxy}" 
                          Content="Enable proxy for API connections" FontSize="12" Margin="0,0,0,8"/>
                
                <!-- Proxy URL -->
                <TextBlock Grid.Row="1" Grid.Column="0" Text="Proxy URL:" Style="{StaticResource LabelStyle}"/>
                <StackPanel Grid.Row="1" Grid.Column="1">
                    <TextBox Text="{Binding ProxyUrl, UpdateSourceTrigger=PropertyChanged}" 
                             Style="{StaticResource InputStyle}"
                             IsEnabled="{Binding UseProxy}"
                             ToolTip="Proxy server URL (e.g., http://proxy.company.com:8080)"/>
                    <TextBlock Text="{Binding ProxyUrlValidationMessage}" 
                               Style="{StaticResource ValidationErrorStyle}"
                               Visibility="{Binding ProxyUrlValidationMessage, Converter={StaticResource BoolToVisConverter}}"/>
                </StackPanel>
            </Grid>
            
            <!-- Action Buttons -->
            <StackPanel Orientation="Horizontal" Margin="0,30,0,0" HorizontalAlignment="Left">
                <Button Content="Test Connection" 
                        Command="{Binding TestConnectionCommand}"
                        Style="{StaticResource SecondaryButtonStyle}"
                        IsEnabled="{Binding IsTestingConnection, Converter={x:Static local:InverseBooleanConverter.Instance}}">
                    <Button.Content>
                        <StackPanel Orientation="Horizontal">
                            <TextBlock Text="🔗" Margin="0,0,5,0" Visibility="{Binding IsTestingConnection, Converter={x:Static local:InverseBooleanToVisibilityConverter.Instance}}"/>
                            <TextBlock Text="⏳" Margin="0,0,5,0" Visibility="{Binding IsTestingConnection, Converter={StaticResource BoolToVisConverter}}"/>
                            <TextBlock Text="Test Connection"/>
                        </StackPanel>
                    </Button.Content>
                </Button>
                
                <Button Content="Save Configuration" 
                        Command="{Binding SaveConfigurationCommand}"
                        Style="{StaticResource PrimaryButtonStyle}"
                        IsEnabled="{Binding IsSaving, Converter={x:Static local:InverseBooleanConverter.Instance}}">
                    <Button.Content>
                        <StackPanel Orientation="Horizontal">
                            <TextBlock Text="💾" Margin="0,0,5,0" Visibility="{Binding IsSaving, Converter={x:Static local:InverseBooleanToVisibilityConverter.Instance}}"/>
                            <TextBlock Text="⏳" Margin="0,0,5,0" Visibility="{Binding IsSaving, Converter={StaticResource BoolToVisConverter}}"/>
                            <TextBlock Text="Save Configuration"/>
                        </StackPanel>
                    </Button.Content>
                </Button>
                
                <Button Content="Reset to Defaults" 
                        Command="{Binding ResetToDefaultsCommand}"
                        Style="{StaticResource DangerButtonStyle}"/>
            </StackPanel>
            
            <!-- Help Section -->
            <Border Background="#F8F9FA" BorderBrush="#DEE2E6" BorderThickness="1" 
                    Padding="16" Margin="0,30,0,20" CornerRadius="4">
                <StackPanel>
                    <TextBlock Text="💡 Configuration Help" FontWeight="SemiBold" FontSize="14" Margin="0,0,0,10"/>
                    <TextBlock TextWrapping="Wrap" FontSize="12" LineHeight="18">
                        <Run Text="• "/>
                        <Run Text="Base URL: "/>
                        <Run Text="Your ThreatStream instance URL (e.g., https://your-company.threatstream.com/api/v2)" Foreground="#7F8C8D"/>
                        <LineBreak/>
                        <Run Text="• "/>
                        <Run Text="API Key: "/>
                        <Run Text="Found in your ThreatStream profile settings. Stored securely using Windows DPAPI." Foreground="#7F8C8D"/>
                        <LineBreak/>
                        <Run Text="• "/>
                        <Run Text="Timeout: "/>
                        <Run Text="How long to wait for API responses. Increase for slow connections." Foreground="#7F8C8D"/>
                        <LineBreak/>
                        <Run Text="• "/>
                        <Run Text="Retries: "/>
                        <Run Text="Number of automatic retry attempts for failed requests." Foreground="#7F8C8D"/>
                    </TextBlock>
                </StackPanel>
            </Border>
            
        </StackPanel>
    </ScrollViewer>
</UserControl>